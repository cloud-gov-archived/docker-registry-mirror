---
staging-cf: &staging-cf
  CF_API: ((staging-cf-api))
  CF_USERNAME: ((staging-cf-username))
  CF_PASSWORD: ((staging-cf-password))
  CF_ORG: ((staging-cf-org))
  CF_SPACE: ((staging-cf-space))
  MIRROR_HOSTNAME: ((staging-mirror-hostname))

jobs:

# - name: configure-pipeline
#   serial_groups:
#   - mirror
#   - proxy
#   plan:
#   - get: pipeline-source
#     trigger: true
#     params: {depth: 1}
#   - set_pipeline: docker-registry-mirror
#     file: pipeline-source/ci/pipeline.yml

- name: deploy-registry-staging
  serial_groups: [mirror]
  plan:
  - in_parallel: 
    - get: registry-source
      trigger: true
      params: {depth: 1}
    - get: docker-registry-image
      trigger: true
    - get: ci-source
      params: {depth: 1}
  - task: create-s3-bucket
    file: ci-source/ci/tasks/create-s3-bucket.yml
    params:
      <<: *staging-cf
  - task: deploy-registry
    file: ci-source/ci/tasks/deploy-registry.yml
    params:
      <<: *staging-cf
    on_failure:
      task: cancel-deployment
      file: ci-source/ci/tasks/cancel-deployment.yml
      params:
        <<: *staging-cf
        CF_APP_NAME: docker-registry-mirror

- name: deploy-proxy-staging
  serial_groups: [proxy]
  plan:
  - in_parallel:
    - get: nginx-conf
      trigger: true
    - get: proxy-source
      trigger: true
      params: {depth: 1}
    - get: ci-source
      params: {depth: 1}
  - task: deploy-proxy
    file: ci-source/ci/tasks/deploy-proxy.yml
    tags: [iaas]
    params: 
      <<: *staging-cf
    # on_failure:
    #   task: cancel-deployment
    #   file: ci-source/ci/tasks/cancel-deployment.yml
    #   params:
    #     <<: *staging-cf
    #     CF_APP_NAME: docker-registry-proxy

- name: integration-test
  serial_groups: [mirror,proxy]
  plan:
  - in_parallel:
    - get: registry-source
      trigger: true
      params: {depth: 1}
      passed: [deploy-registry-staging]
    - get: docker-registry-image
      trigger: true
      passed: [deploy-registry-staging]
    - get: nginx-conf
      trigger: true
      passed: [deploy-proxy-staging]
    - get: proxy-source
      trigger: true
      params: {depth: 1}
      passed: [deploy-proxy-staging]
    - get: ci-source
      params: {depth: 1}
  # Be sure we can pull an image through the mirror using the docker-image resource type
  - task: test-pull-succeeds-docker-image
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: 18fgsa/concourse-task
          registry_mirror: "https://((staging-mirror-hostname)).app.cloud.gov:443"
      run:
        path: /bin/sh
        args:
        - -ec
        - |
          date
    # on_failure:
  # Be sure we can pull an image through the mirror using the registry-image resource type
  - task: test-pull-succeeds-registry-image
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: 18fgsa/concourse-task
          registry_mirror: 
            host: "((staging-mirror-hostname)).app.cloud.gov:443"
      run:
        path: /bin/sh
        args:
        - -ec
        - |
          date
    # on_failure:
  - task: test-no-push
    file: ci-source/ci/tasks/test-no-push.yml
    params:
      MIRROR_HOSTNAME: ((staging-mirror-hostname))

resources:

# - name: pipeline-source
#   type: git
#   source:
#     uri: https://github.com/cloud-gov/docker-registry-mirror.git
#     paths: [ci/pipeline.yml]
#     branch: initial-pipeline

- name: ci-source
  type: git
  source:
    uri: https://github.com/cloud-gov/docker-registry-mirror.git
    paths: [ci/*]
    branch: initial-pipeline

- name: nginx-conf
  type: s3-iam
  tags: [iaas]
  source:
    bucket: ((concourse-varz-bucket))
    region_name: ((concourse-varz-bucket-region))
    versioned_file: docker-registry-mirror/nginx/nginx.conf

- name: proxy-source
  type: git
  source:
    uri: https://github.com/cloud-gov/docker-registry-mirror.git
    paths: [proxy/*]
    branch: initial-pipeline

- name: registry-source
  type: git
  source:
    uri: https://github.com/cloud-gov/docker-registry-mirror.git
    paths: [registry/*]
    branch: initial-pipeline

- name: docker-registry-image
  type: docker-image
  source:
    repository: registry

- name: no-push-image
  type: docker-image
  source:
    repository: 18fgsa/no-push
    registry_mirror: (())

resource_types:

- name: s3-iam
  type: docker-image
  source:
    repository: 18fgsa/s3-resource

